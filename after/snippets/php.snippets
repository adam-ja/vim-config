snippet varx
	error_log(var_export(${1:var}, true));
snippet valint
	if (!filter_var($${1:}, FILTER_VALIDATE_INT)) {
		throw new \InvalidArgumentException(
			'$1 is not a valid integer ' . var_export($$1, true),
			${2:errorcode}
		);
	}

snippet valfloat
	if (false === filter_var(${1:}, FILTER_VALIDATE_FLOAT)) {
		throw new \InvalidArgumentException(
			'$1 is not a float ' . var_export($$1, true),
			${2:errorcode}
		);
	}

snippet zfclass
	<?php
	namespace ${1:namespace};

	class ${2:classname}
	{
		public function __construct()
		{
		}
	}
snippet zffactory
	<?php
	namespace ${1:namespace};

	use Zend\ServiceManager\FactoryInterface;
	use Zend\ServiceManager\ServiceLocatorInterface;

	class ${2:Factory} implements FactoryInterface
	{
		public function createService(ServiceLocatorInterface $serviceLocator)
		{
			${3}
		}
	}
snippet unittest
	<?php
	namespace ${1:namespace};

	class ${2:Test} extends \PHPUnit_Framework_TestCase
	{
		public function setUp()
		{
			${3}
		}
	}
snippet zfcontroller
	<?php
	namespace ${1:namespace};

	use Zend\Mvc\Controller\AbstractActionController;

	class ${2}Controller extends AbstractActionController
	{
		public function ${3}Action()
		{
		}
	}
snippet zfvalidator
	<?php
	namespace ${1:namespace};

	use Zend\Validator\AbstractValidator;

	class ${2} extends AbstractValidator
	{
		protected $messageTemplates = array(
		);

		public function isValid($value)
		{
			$this->setValue($value);
			${3}
		}
	}
snippet setter
	public function set${1:ParamName}($${2:paramName})
	{
		$this->$2 = $$2;
		return $this;
	}

snippet getter
	public function get${1:ParamName}()
	{
		return $this->${2:paramName};
	}

snippet getset
	public function set${1:ParamName}($${2:paramName})
	{
		$this->$2 = $$2;
		return $this;
	}

	public function get$1()
	{
		return $this->$2;
	}
