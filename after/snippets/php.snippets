snippet varx
	var_export(${1:var}, true)
snippet err
	error_log(var_export(${1:var}, true));
snippet zfclass
	<?php
	namespace ${1:namespace};

	class ${2:`vim_snippets#Filename()`}
	{
		public function __construct()
		{
		}
	}
snippet zffactory
	<?php
	namespace ${1:namespace};

	use Zend\ServiceManager\FactoryInterface;
	use Zend\ServiceManager\ServiceLocatorInterface;

	class ${2:`vim_snippets#Filename()`} implements FactoryInterface
	{
		public function createService(ServiceLocatorInterface $serviceLocator)
		{
			${3}
		}
	}
snippet unittest
	<?php
	namespace ${1:namespace};

	use PHPUnit\Framework\TestCase;

	class ${2:`vim_snippets#Filename()`} extends TestCase
	{
		protected function setUp()
		{
			${3}
		}
	}
snippet setter
	${1:public} function set${2:ParamName}($${3:paramName})
	{
		$this->$3 = $$3;
	}
snippet getter
	public function get${1:ParamName}()
	{
		return $this->${2:paramName};
	}
snippet getset
	${1:public} function set${2:ParamName}($${3:paramName})
	{
		$this->$3 = $$3;
	}

	public function get$2()
	{
		return $this->$3;
	}
snippet sethasget
	${1:public} function set${2:ParamName}(${3:type} $${4:paramName})
	{
		$this->$4 = $$4;
	}

	public function has$2(): bool
	{
		return null !== $this->$4;
	}

	public function get$2(): $3
	{
		if (!$this->has$2()) {
			throw new \RuntimeException('$4 is not set');
		}

		return $this->$4;
	}
snippet provider
	public function provide${1:ProvidedThing}(): array
	{
		return [
			[${2:FirstDataSet}],
		];
	}
